// Code generated by protoc-gen-go. DO NOT EDIT.
// source: remoteproc.proto

package remoteproc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_28e8e358145d4354, []int{0}
}

func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

type Process struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Process) Reset()         { *m = Process{} }
func (m *Process) String() string { return proto.CompactTextString(m) }
func (*Process) ProtoMessage()    {}
func (*Process) Descriptor() ([]byte, []int) {
	return fileDescriptor_28e8e358145d4354, []int{1}
}

func (m *Process) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Process.Unmarshal(m, b)
}
func (m *Process) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Process.Marshal(b, m, deterministic)
}
func (m *Process) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Process.Merge(m, src)
}
func (m *Process) XXX_Size() int {
	return xxx_messageInfo_Process.Size(m)
}
func (m *Process) XXX_DiscardUnknown() {
	xxx_messageInfo_Process.DiscardUnknown(m)
}

var xxx_messageInfo_Process proto.InternalMessageInfo

func (m *Process) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func init() {
	proto.RegisterType((*Empty)(nil), "remoteproc.Empty")
	proto.RegisterType((*Process)(nil), "remoteproc.Process")
}

func init() { proto.RegisterFile("remoteproc.proto", fileDescriptor_28e8e358145d4354) }

var fileDescriptor_28e8e358145d4354 = []byte{
	// 125 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x28, 0x4a, 0xcd, 0xcd,
	0x2f, 0x49, 0x2d, 0x28, 0xca, 0x4f, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x42, 0x88,
	0x28, 0xb1, 0x73, 0xb1, 0xba, 0xe6, 0x16, 0x94, 0x54, 0x2a, 0xc9, 0x72, 0xb1, 0x07, 0x14, 0xe5,
	0x27, 0xa7, 0x16, 0x17, 0x0b, 0x09, 0x71, 0xb1, 0xe4, 0x25, 0xe6, 0xa6, 0x4a, 0x30, 0x2a, 0x30,
	0x6a, 0x70, 0x06, 0x81, 0xd9, 0x46, 0xae, 0x5c, 0x5c, 0x41, 0x60, 0x5d, 0x20, 0x45, 0x42, 0xe6,
	0x5c, 0xdc, 0xee, 0xa9, 0x25, 0x20, 0xa6, 0x5f, 0x62, 0x6e, 0xaa, 0x90, 0xa0, 0x1e, 0x92, 0x1d,
	0x60, 0xe3, 0xa4, 0x84, 0x91, 0x85, 0xa0, 0x06, 0x2b, 0x31, 0x24, 0xb1, 0x81, 0x5d, 0x60, 0x0c,
	0x08, 0x00, 0x00, 0xff, 0xff, 0x79, 0x7e, 0x25, 0x34, 0x95, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RemoteProcClient is the client API for RemoteProc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RemoteProcClient interface {
	GetProcName(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Process, error)
}

type remoteProcClient struct {
	cc *grpc.ClientConn
}

func NewRemoteProcClient(cc *grpc.ClientConn) RemoteProcClient {
	return &remoteProcClient{cc}
}

func (c *remoteProcClient) GetProcName(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Process, error) {
	out := new(Process)
	err := c.cc.Invoke(ctx, "/remoteproc.RemoteProc/GetProcName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RemoteProcServer is the server API for RemoteProc service.
type RemoteProcServer interface {
	GetProcName(context.Context, *Empty) (*Process, error)
}

func RegisterRemoteProcServer(s *grpc.Server, srv RemoteProcServer) {
	s.RegisterService(&_RemoteProc_serviceDesc, srv)
}

func _RemoteProc_GetProcName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteProcServer).GetProcName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remoteproc.RemoteProc/GetProcName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteProcServer).GetProcName(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _RemoteProc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "remoteproc.RemoteProc",
	HandlerType: (*RemoteProcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProcName",
			Handler:    _RemoteProc_GetProcName_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "remoteproc.proto",
}
